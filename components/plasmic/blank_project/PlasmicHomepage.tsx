// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nGtPzsjomiuYGifwjoUrBx
// Component: 3Qxm4mQL9hNL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { PlasmicAntDesignTable } from "../../PlasmicAntDesignTable"; // plasmic-import: xLlNgNsEIT/codeComponent
import { PlasmicAntDesignTableColumn } from "../../PlasmicAntDesignTable"; // plasmic-import: fkJoWj_9Xm/codeComponent
import { PlasmicAntDesignTableColumnValue } from "../../PlasmicAntDesignTable"; // plasmic-import: Ex8DRaq3Ox/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: nGtPzsjomiuYGifwjoUrBx/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 3Qxm4mQL9hNL/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  plasmicAntDesignTable?: p.Flex<typeof PlasmicAntDesignTable>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Welcome to your first page."}
            </h1>
          </p.Stack>

          <PlasmicAntDesignTable
            data-plasmic-name={"plasmicAntDesignTable"}
            data-plasmic-override={overrides.plasmicAntDesignTable}
            bordered={true}
            className={classNames("__wab_instance", sty.plasmicAntDesignTable)}
            columns={
              <React.Fragment>
                <PlasmicAntDesignTableColumn
                  align={"left" as const}
                  className={classNames(
                    "__wab_instance",
                    sty.plasmicAntDesignTableColumn__djtPi
                  )}
                  colSpan={1 as const}
                  columnTemplate={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <>
                          <PlasmicAntDesignTableColumnValue
                            className={classNames(
                              "__wab_instance",
                              sty.plasmicAntDesignTableColumnValue__laycL
                            )}
                          />
                        </>
                      )}
                    </ph.DataCtxReader>
                  }
                  dataIndex={"name" as const}
                  filterDropdownVisible={false}
                  fixed={true}
                  sorter={true}
                  title={"Name" as const}
                />

                <PlasmicAntDesignTableColumn
                  className={classNames(
                    "__wab_instance",
                    sty.plasmicAntDesignTableColumn__kB43K
                  )}
                  colSpan={1 as const}
                  columnTemplate={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <>
                          <PlasmicAntDesignTableColumnValue
                            className={classNames(
                              "__wab_instance",
                              sty.plasmicAntDesignTableColumnValue__mb5L
                            )}
                          />
                        </>
                      )}
                    </ph.DataCtxReader>
                  }
                  dataIndex={"age" as const}
                  filterDropdownVisible={false}
                  fixed={false}
                  sorter={false}
                  title={"Age" as const}
                />

                <PlasmicAntDesignTableColumn
                  align={"left" as const}
                  className={classNames(
                    "__wab_instance",
                    sty.plasmicAntDesignTableColumn__h63Mu
                  )}
                  colSpan={1 as const}
                  columnTemplate={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <>
                          <PlasmicAntDesignTableColumnValue
                            className={classNames(
                              "__wab_instance",
                              sty.plasmicAntDesignTableColumnValue__lr824
                            )}
                          />
                        </>
                      )}
                    </ph.DataCtxReader>
                  }
                  dataIndex={"address" as const}
                  filterDropdownVisible={false}
                  fixed={false}
                  sorter={true}
                  title={"Address" as const}
                />

                <PlasmicAntDesignTableColumn
                  className={classNames(
                    "__wab_instance",
                    sty.plasmicAntDesignTableColumn__hegXk
                  )}
                  colSpan={1 as const}
                  columnTemplate={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <>
                          <PlasmicAntDesignTableColumnValue
                            className={classNames(
                              "__wab_instance",
                              sty.plasmicAntDesignTableColumnValue___3DdF
                            )}
                          />
                        </>
                      )}
                    </ph.DataCtxReader>
                  }
                  dataIndex={"tags" as const}
                  filterDropdownVisible={false}
                  fixed={true}
                  sorter={false}
                  title={"Tags" as const}
                />
              </React.Fragment>
            }
            items={[
              {
                name: "John Brown",
                age: 19,
                address: "New York No. 1 Lake Park",
                tags: ["student", "developer"]
              },
              {
                name: "Jim Green",
                age: 42,
                address: "London No. 1 Lake Park",
                tags: ["teacher"]
              },
              {
                name: "Joe Black",
                age: 32,
                address: "Sidney No. 1 Lake Park",
                tags: ["cool", "teacher"]
              }
            ]}
            pagination={[{ position: "topRright" }]}
            scroll={{ scrollToFirstRowOnChange: true, x: true, y: false }}
            showHeader={true}
            size={"" as const}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "h1", "plasmicAntDesignTable"],
  section: ["section", "h1"],
  h1: ["h1"],
  plasmicAntDesignTable: ["plasmicAntDesignTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h1: "h1";
  plasmicAntDesignTable: typeof PlasmicAntDesignTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    plasmicAntDesignTable: makeNodeComponent("plasmicAntDesignTable"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
